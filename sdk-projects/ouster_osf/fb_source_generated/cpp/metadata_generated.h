// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METADATA_OUSTER_OSF_V2_H_
#define FLATBUFFERS_GENERATED_METADATA_OUSTER_OSF_V2_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace ouster {
namespace osf {
namespace v2 {

struct ChunkOffset;

struct MetadataEntry;
struct MetadataEntryBuilder;

struct Metadata;
struct MetadataBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) ChunkOffset FLATBUFFERS_FINAL_CLASS {
 private:
  uint64_t start_ts_;
  uint64_t end_ts_;
  uint64_t offset_;

 public:
  ChunkOffset()
      : start_ts_(0),
        end_ts_(0),
        offset_(0) {
  }
  ChunkOffset(uint64_t _start_ts, uint64_t _end_ts, uint64_t _offset)
      : start_ts_(::flatbuffers::EndianScalar(_start_ts)),
        end_ts_(::flatbuffers::EndianScalar(_end_ts)),
        offset_(::flatbuffers::EndianScalar(_offset)) {
  }
  uint64_t start_ts() const {
    return ::flatbuffers::EndianScalar(start_ts_);
  }
  uint64_t end_ts() const {
    return ::flatbuffers::EndianScalar(end_ts_);
  }
  uint64_t offset() const {
    return ::flatbuffers::EndianScalar(offset_);
  }
};
FLATBUFFERS_STRUCT_END(ChunkOffset, 24);

struct MetadataEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetadataEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_BUFFER = 8
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const MetadataEntry * const o) const {
    return id() < o->id();
  }
  int KeyCompareWithValue(uint32_t _id) const {
    return static_cast<int>(id() > _id) - static_cast<int>(id() < _id);
  }
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  const ::flatbuffers::Vector<uint8_t> *buffer() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_BUFFER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           verifier.EndTable();
  }
};

struct MetadataEntryBuilder {
  typedef MetadataEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(MetadataEntry::VT_ID, id, 0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(MetadataEntry::VT_TYPE, type);
  }
  void add_buffer(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> buffer) {
    fbb_.AddOffset(MetadataEntry::VT_BUFFER, buffer);
  }
  explicit MetadataEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MetadataEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MetadataEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MetadataEntry> CreateMetadataEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> buffer = 0) {
  MetadataEntryBuilder builder_(_fbb);
  builder_.add_buffer(buffer);
  builder_.add_type(type);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MetadataEntry> CreateMetadataEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *type = nullptr,
    const std::vector<uint8_t> *buffer = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto buffer__ = buffer ? _fbb.CreateVector<uint8_t>(*buffer) : 0;
  return ouster::osf::v2::CreateMetadataEntry(
      _fbb,
      id,
      type__,
      buffer__);
}

struct Metadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_START_TS = 6,
    VT_END_TS = 8,
    VT_CHUNKS = 10,
    VT_ENTRIES = 12
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  uint64_t start_ts() const {
    return GetField<uint64_t>(VT_START_TS, 0);
  }
  uint64_t end_ts() const {
    return GetField<uint64_t>(VT_END_TS, 0);
  }
  const ::flatbuffers::Vector<const ouster::osf::v2::ChunkOffset *> *chunks() const {
    return GetPointer<const ::flatbuffers::Vector<const ouster::osf::v2::ChunkOffset *> *>(VT_CHUNKS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::MetadataEntry>> *entries() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::MetadataEntry>> *>(VT_ENTRIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<uint64_t>(verifier, VT_START_TS, 8) &&
           VerifyField<uint64_t>(verifier, VT_END_TS, 8) &&
           VerifyOffset(verifier, VT_CHUNKS) &&
           verifier.VerifyVector(chunks()) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(entries()) &&
           verifier.VerifyVectorOfTables(entries()) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  typedef Metadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Metadata::VT_ID, id);
  }
  void add_start_ts(uint64_t start_ts) {
    fbb_.AddElement<uint64_t>(Metadata::VT_START_TS, start_ts, 0);
  }
  void add_end_ts(uint64_t end_ts) {
    fbb_.AddElement<uint64_t>(Metadata::VT_END_TS, end_ts, 0);
  }
  void add_chunks(::flatbuffers::Offset<::flatbuffers::Vector<const ouster::osf::v2::ChunkOffset *>> chunks) {
    fbb_.AddOffset(Metadata::VT_CHUNKS, chunks);
  }
  void add_entries(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::MetadataEntry>>> entries) {
    fbb_.AddOffset(Metadata::VT_ENTRIES, entries);
  }
  explicit MetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Metadata> CreateMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    uint64_t start_ts = 0,
    uint64_t end_ts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const ouster::osf::v2::ChunkOffset *>> chunks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::MetadataEntry>>> entries = 0) {
  MetadataBuilder builder_(_fbb);
  builder_.add_end_ts(end_ts);
  builder_.add_start_ts(start_ts);
  builder_.add_entries(entries);
  builder_.add_chunks(chunks);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Metadata> CreateMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    uint64_t start_ts = 0,
    uint64_t end_ts = 0,
    const std::vector<ouster::osf::v2::ChunkOffset> *chunks = nullptr,
    std::vector<::flatbuffers::Offset<ouster::osf::v2::MetadataEntry>> *entries = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto chunks__ = chunks ? _fbb.CreateVectorOfStructs<ouster::osf::v2::ChunkOffset>(*chunks) : 0;
  auto entries__ = entries ? _fbb.CreateVectorOfSortedTables<ouster::osf::v2::MetadataEntry>(entries) : 0;
  return ouster::osf::v2::CreateMetadata(
      _fbb,
      id__,
      start_ts,
      end_ts,
      chunks__,
      entries__);
}

inline const ouster::osf::v2::Metadata *GetMetadata(const void *buf) {
  return ::flatbuffers::GetRoot<ouster::osf::v2::Metadata>(buf);
}

inline const ouster::osf::v2::Metadata *GetSizePrefixedMetadata(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ouster::osf::v2::Metadata>(buf);
}

inline const char *MetadataIdentifier() {
  return "OSF#";
}

inline bool MetadataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MetadataIdentifier());
}

inline bool SizePrefixedMetadataBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MetadataIdentifier(), true);
}

inline bool VerifyMetadataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ouster::osf::v2::Metadata>(MetadataIdentifier());
}

inline bool VerifySizePrefixedMetadataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ouster::osf::v2::Metadata>(MetadataIdentifier());
}

inline const char *MetadataExtension() {
  return "osfs";
}

inline void FinishMetadataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::Metadata> root) {
  fbb.Finish(root, MetadataIdentifier());
}

inline void FinishSizePrefixedMetadataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::Metadata> root) {
  fbb.FinishSizePrefixed(root, MetadataIdentifier());
}

}  // namespace v2
}  // namespace osf
}  // namespace ouster

#endif  // FLATBUFFERS_GENERATED_METADATA_OUSTER_OSF_V2_H_
