// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_OUSTER_OSF_V2_H_
#define FLATBUFFERS_GENERATED_COMMON_OUSTER_OSF_V2_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace ouster {
namespace osf {
namespace v2 {

struct Field;
struct FieldBuilder;

enum class CHAN_FIELD_TYPE : uint8_t {
  VOID = 0,
  UINT8 = 1,
  UINT16 = 2,
  UINT32 = 3,
  UINT64 = 4,
  INT8 = 5,
  INT16 = 6,
  INT32 = 7,
  INT64 = 8,
  FLOAT32 = 9,
  FLOAT64 = 10,
  MIN = VOID,
  MAX = FLOAT64
};

inline const CHAN_FIELD_TYPE (&EnumValuesCHAN_FIELD_TYPE())[11] {
  static const CHAN_FIELD_TYPE values[] = {
    CHAN_FIELD_TYPE::VOID,
    CHAN_FIELD_TYPE::UINT8,
    CHAN_FIELD_TYPE::UINT16,
    CHAN_FIELD_TYPE::UINT32,
    CHAN_FIELD_TYPE::UINT64,
    CHAN_FIELD_TYPE::INT8,
    CHAN_FIELD_TYPE::INT16,
    CHAN_FIELD_TYPE::INT32,
    CHAN_FIELD_TYPE::INT64,
    CHAN_FIELD_TYPE::FLOAT32,
    CHAN_FIELD_TYPE::FLOAT64
  };
  return values;
}

inline const char * const *EnumNamesCHAN_FIELD_TYPE() {
  static const char * const names[12] = {
    "VOID",
    "UINT8",
    "UINT16",
    "UINT32",
    "UINT64",
    "INT8",
    "INT16",
    "INT32",
    "INT64",
    "FLOAT32",
    "FLOAT64",
    nullptr
  };
  return names;
}

inline const char *EnumNameCHAN_FIELD_TYPE(CHAN_FIELD_TYPE e) {
  if (::flatbuffers::IsOutRange(e, CHAN_FIELD_TYPE::VOID, CHAN_FIELD_TYPE::FLOAT64)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCHAN_FIELD_TYPE()[index];
}

enum class FIELD_CLASS : int64_t {
  NONE = 0,
  PIXEL_FIELD = 1LL,
  COLUMN_FIELD = 2LL,
  PACKET_FIELD = 3LL,
  SCAN_FIELD = 4LL,
  MIN = NONE,
  MAX = SCAN_FIELD
};

inline const FIELD_CLASS (&EnumValuesFIELD_CLASS())[5] {
  static const FIELD_CLASS values[] = {
    FIELD_CLASS::NONE,
    FIELD_CLASS::PIXEL_FIELD,
    FIELD_CLASS::COLUMN_FIELD,
    FIELD_CLASS::PACKET_FIELD,
    FIELD_CLASS::SCAN_FIELD
  };
  return values;
}

inline const char * const *EnumNamesFIELD_CLASS() {
  static const char * const names[6] = {
    "NONE",
    "PIXEL_FIELD",
    "COLUMN_FIELD",
    "PACKET_FIELD",
    "SCAN_FIELD",
    nullptr
  };
  return names;
}

inline const char *EnumNameFIELD_CLASS(FIELD_CLASS e) {
  if (::flatbuffers::IsOutRange(e, FIELD_CLASS::NONE, FIELD_CLASS::SCAN_FIELD)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFIELD_CLASS()[index];
}

struct Field FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FieldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TAG = 6,
    VT_SHAPE = 8,
    VT_FIELD_CLASS = 10,
    VT_DATA = 12,
    VT_BYTES = 14
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ouster::osf::v2::CHAN_FIELD_TYPE tag() const {
    return static_cast<ouster::osf::v2::CHAN_FIELD_TYPE>(GetField<uint8_t>(VT_TAG, 0));
  }
  const ::flatbuffers::Vector<uint64_t> *shape() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_SHAPE);
  }
  ouster::osf::v2::FIELD_CLASS field_class() const {
    return static_cast<ouster::osf::v2::FIELD_CLASS>(GetField<int64_t>(VT_FIELD_CLASS, 0));
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  uint64_t bytes() const {
    return GetField<uint64_t>(VT_BYTES, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TAG, 1) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.VerifyVector(shape()) &&
           VerifyField<int64_t>(verifier, VT_FIELD_CLASS, 8) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<uint64_t>(verifier, VT_BYTES, 8) &&
           verifier.EndTable();
  }
};

struct FieldBuilder {
  typedef Field Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Field::VT_NAME, name);
  }
  void add_tag(ouster::osf::v2::CHAN_FIELD_TYPE tag) {
    fbb_.AddElement<uint8_t>(Field::VT_TAG, static_cast<uint8_t>(tag), 0);
  }
  void add_shape(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> shape) {
    fbb_.AddOffset(Field::VT_SHAPE, shape);
  }
  void add_field_class(ouster::osf::v2::FIELD_CLASS field_class) {
    fbb_.AddElement<int64_t>(Field::VT_FIELD_CLASS, static_cast<int64_t>(field_class), 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Field::VT_DATA, data);
  }
  void add_bytes(uint64_t bytes) {
    fbb_.AddElement<uint64_t>(Field::VT_BYTES, bytes, 0);
  }
  explicit FieldBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Field> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Field>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Field> CreateField(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ouster::osf::v2::CHAN_FIELD_TYPE tag = ouster::osf::v2::CHAN_FIELD_TYPE::VOID,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> shape = 0,
    ouster::osf::v2::FIELD_CLASS field_class = ouster::osf::v2::FIELD_CLASS::NONE,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    uint64_t bytes = 0) {
  FieldBuilder builder_(_fbb);
  builder_.add_bytes(bytes);
  builder_.add_field_class(field_class);
  builder_.add_data(data);
  builder_.add_shape(shape);
  builder_.add_name(name);
  builder_.add_tag(tag);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Field> CreateFieldDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ouster::osf::v2::CHAN_FIELD_TYPE tag = ouster::osf::v2::CHAN_FIELD_TYPE::VOID,
    const std::vector<uint64_t> *shape = nullptr,
    ouster::osf::v2::FIELD_CLASS field_class = ouster::osf::v2::FIELD_CLASS::NONE,
    const std::vector<uint8_t> *data = nullptr,
    uint64_t bytes = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto shape__ = shape ? _fbb.CreateVector<uint64_t>(*shape) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return ouster::osf::v2::CreateField(
      _fbb,
      name__,
      tag,
      shape__,
      field_class,
      data__,
      bytes);
}

}  // namespace v2
}  // namespace osf
}  // namespace ouster

#endif  // FLATBUFFERS_GENERATED_COMMON_OUSTER_OSF_V2_H_
