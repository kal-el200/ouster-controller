// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXTRINSICS_OUSTER_OSF_V2_H_
#define FLATBUFFERS_GENERATED_EXTRINSICS_OUSTER_OSF_V2_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace ouster {
namespace osf {
namespace v2 {

struct Extrinsics;
struct ExtrinsicsBuilder;

struct Extrinsics FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ExtrinsicsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EXTRINSICS = 4,
    VT_REF_ID = 6,
    VT_NAME = 8
  };
  const ::flatbuffers::Vector<double> *extrinsics() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_EXTRINSICS);
  }
  uint32_t ref_id() const {
    return GetField<uint32_t>(VT_REF_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EXTRINSICS) &&
           verifier.VerifyVector(extrinsics()) &&
           VerifyField<uint32_t>(verifier, VT_REF_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ExtrinsicsBuilder {
  typedef Extrinsics Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_extrinsics(::flatbuffers::Offset<::flatbuffers::Vector<double>> extrinsics) {
    fbb_.AddOffset(Extrinsics::VT_EXTRINSICS, extrinsics);
  }
  void add_ref_id(uint32_t ref_id) {
    fbb_.AddElement<uint32_t>(Extrinsics::VT_REF_ID, ref_id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Extrinsics::VT_NAME, name);
  }
  explicit ExtrinsicsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Extrinsics> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Extrinsics>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Extrinsics> CreateExtrinsics(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> extrinsics = 0,
    uint32_t ref_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  ExtrinsicsBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_ref_id(ref_id);
  builder_.add_extrinsics(extrinsics);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Extrinsics> CreateExtrinsicsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *extrinsics = nullptr,
    uint32_t ref_id = 0,
    const char *name = nullptr) {
  auto extrinsics__ = extrinsics ? _fbb.CreateVector<double>(*extrinsics) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ouster::osf::v2::CreateExtrinsics(
      _fbb,
      extrinsics__,
      ref_id,
      name__);
}

inline const ouster::osf::v2::Extrinsics *GetExtrinsics(const void *buf) {
  return ::flatbuffers::GetRoot<ouster::osf::v2::Extrinsics>(buf);
}

inline const ouster::osf::v2::Extrinsics *GetSizePrefixedExtrinsics(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ouster::osf::v2::Extrinsics>(buf);
}

inline const char *ExtrinsicsIdentifier() {
  return "oExt";
}

inline bool ExtrinsicsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ExtrinsicsIdentifier());
}

inline bool SizePrefixedExtrinsicsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ExtrinsicsIdentifier(), true);
}

inline bool VerifyExtrinsicsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ouster::osf::v2::Extrinsics>(ExtrinsicsIdentifier());
}

inline bool VerifySizePrefixedExtrinsicsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ouster::osf::v2::Extrinsics>(ExtrinsicsIdentifier());
}

inline void FinishExtrinsicsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::Extrinsics> root) {
  fbb.Finish(root, ExtrinsicsIdentifier());
}

inline void FinishSizePrefixedExtrinsicsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::Extrinsics> root) {
  fbb.FinishSizePrefixed(root, ExtrinsicsIdentifier());
}

}  // namespace v2
}  // namespace osf
}  // namespace ouster

#endif  // FLATBUFFERS_GENERATED_EXTRINSICS_OUSTER_OSF_V2_H_
