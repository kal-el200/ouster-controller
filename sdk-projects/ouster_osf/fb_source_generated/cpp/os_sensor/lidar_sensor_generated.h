// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LIDARSENSOR_OUSTER_OSF_V2_H_
#define FLATBUFFERS_GENERATED_LIDARSENSOR_OUSTER_OSF_V2_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace ouster {
namespace osf {
namespace v2 {

struct LidarSensor;
struct LidarSensorBuilder;

struct LidarSensor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LidarSensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_METADATA = 4
  };
  const ::flatbuffers::String *metadata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyString(metadata()) &&
           verifier.EndTable();
  }
};

struct LidarSensorBuilder {
  typedef LidarSensor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_metadata(::flatbuffers::Offset<::flatbuffers::String> metadata) {
    fbb_.AddOffset(LidarSensor::VT_METADATA, metadata);
  }
  explicit LidarSensorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LidarSensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LidarSensor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LidarSensor> CreateLidarSensor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> metadata = 0) {
  LidarSensorBuilder builder_(_fbb);
  builder_.add_metadata(metadata);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LidarSensor> CreateLidarSensorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *metadata = nullptr) {
  auto metadata__ = metadata ? _fbb.CreateString(metadata) : 0;
  return ouster::osf::v2::CreateLidarSensor(
      _fbb,
      metadata__);
}

inline const ouster::osf::v2::LidarSensor *GetLidarSensor(const void *buf) {
  return ::flatbuffers::GetRoot<ouster::osf::v2::LidarSensor>(buf);
}

inline const ouster::osf::v2::LidarSensor *GetSizePrefixedLidarSensor(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ouster::osf::v2::LidarSensor>(buf);
}

inline const char *LidarSensorIdentifier() {
  return "oLS_";
}

inline bool LidarSensorBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LidarSensorIdentifier());
}

inline bool SizePrefixedLidarSensorBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LidarSensorIdentifier(), true);
}

inline bool VerifyLidarSensorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ouster::osf::v2::LidarSensor>(LidarSensorIdentifier());
}

inline bool VerifySizePrefixedLidarSensorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ouster::osf::v2::LidarSensor>(LidarSensorIdentifier());
}

inline void FinishLidarSensorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::LidarSensor> root) {
  fbb.Finish(root, LidarSensorIdentifier());
}

inline void FinishSizePrefixedLidarSensorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::LidarSensor> root) {
  fbb.FinishSizePrefixed(root, LidarSensorIdentifier());
}

}  // namespace v2
}  // namespace osf
}  // namespace ouster

#endif  // FLATBUFFERS_GENERATED_LIDARSENSOR_OUSTER_OSF_V2_H_
