// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHUNK_OUSTER_OSF_V2_H_
#define FLATBUFFERS_GENERATED_CHUNK_OUSTER_OSF_V2_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace ouster {
namespace osf {
namespace v2 {

struct StampedMessage;
struct StampedMessageBuilder;

struct Chunk;
struct ChunkBuilder;

struct StampedMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StampedMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TS = 4,
    VT_ID = 6,
    VT_BUFFER = 8
  };
  uint64_t ts() const {
    return GetField<uint64_t>(VT_TS, 0);
  }
  bool KeyCompareLessThan(const StampedMessage * const o) const {
    return ts() < o->ts();
  }
  int KeyCompareWithValue(uint64_t _ts) const {
    return static_cast<int>(ts() > _ts) - static_cast<int>(ts() < _ts);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *buffer() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_BUFFER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TS, 8) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           verifier.EndTable();
  }
};

struct StampedMessageBuilder {
  typedef StampedMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ts(uint64_t ts) {
    fbb_.AddElement<uint64_t>(StampedMessage::VT_TS, ts, 0);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(StampedMessage::VT_ID, id, 0);
  }
  void add_buffer(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> buffer) {
    fbb_.AddOffset(StampedMessage::VT_BUFFER, buffer);
  }
  explicit StampedMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StampedMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StampedMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StampedMessage> CreateStampedMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t ts = 0,
    uint32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> buffer = 0) {
  StampedMessageBuilder builder_(_fbb);
  builder_.add_ts(ts);
  builder_.add_buffer(buffer);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StampedMessage> CreateStampedMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t ts = 0,
    uint32_t id = 0,
    const std::vector<uint8_t> *buffer = nullptr) {
  auto buffer__ = buffer ? _fbb.CreateVector<uint8_t>(*buffer) : 0;
  return ouster::osf::v2::CreateStampedMessage(
      _fbb,
      ts,
      id,
      buffer__);
}

struct Chunk FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChunkBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::StampedMessage>> *messages() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::StampedMessage>> *>(VT_MESSAGES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           verifier.VerifyVectorOfTables(messages()) &&
           verifier.EndTable();
  }
};

struct ChunkBuilder {
  typedef Chunk Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_messages(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::StampedMessage>>> messages) {
    fbb_.AddOffset(Chunk::VT_MESSAGES, messages);
  }
  explicit ChunkBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Chunk> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Chunk>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Chunk> CreateChunk(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ouster::osf::v2::StampedMessage>>> messages = 0) {
  ChunkBuilder builder_(_fbb);
  builder_.add_messages(messages);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Chunk> CreateChunkDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<ouster::osf::v2::StampedMessage>> *messages = nullptr) {
  auto messages__ = messages ? _fbb.CreateVectorOfSortedTables<ouster::osf::v2::StampedMessage>(messages) : 0;
  return ouster::osf::v2::CreateChunk(
      _fbb,
      messages__);
}

inline const ouster::osf::v2::Chunk *GetChunk(const void *buf) {
  return ::flatbuffers::GetRoot<ouster::osf::v2::Chunk>(buf);
}

inline const ouster::osf::v2::Chunk *GetSizePrefixedChunk(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ouster::osf::v2::Chunk>(buf);
}

inline const char *ChunkIdentifier() {
  return "OSF!";
}

inline bool ChunkBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ChunkIdentifier());
}

inline bool SizePrefixedChunkBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ChunkIdentifier(), true);
}

inline bool VerifyChunkBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ouster::osf::v2::Chunk>(ChunkIdentifier());
}

inline bool VerifySizePrefixedChunkBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ouster::osf::v2::Chunk>(ChunkIdentifier());
}

inline const char *ChunkExtension() {
  return "osfc";
}

inline void FinishChunkBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::Chunk> root) {
  fbb.Finish(root, ChunkIdentifier());
}

inline void FinishSizePrefixedChunkBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ouster::osf::v2::Chunk> root) {
  fbb.FinishSizePrefixed(root, ChunkIdentifier());
}

}  // namespace v2
}  // namespace osf
}  // namespace ouster

#endif  // FLATBUFFERS_GENERATED_CHUNK_OUSTER_OSF_V2_H_
